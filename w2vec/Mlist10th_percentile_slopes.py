import numpy as np
import numpy as np

"""
# This is the code to find a slope for each participant with their probability of list recall and average Mlist10th percentile value per list

nan = np.nan

files_ltpFR2 = glob.glob('/Users/adaaka/rhino_mount/data/eeg/scalp/ltp/ltpFR2/behavioral/data/stat_data_LTP*.mat')
larger_90 = [33, 35, 100, 109, 134, 198, 210, 336, 397, 403, 407, 429, 579, 584, 592, 602, 624, 684, 713, 754, 755, 778, 785, 834, 876, 929, 953, 977, 1016, 1022, 1031, 1071, 1079, 1112, 1139, 1140, 1144, 1147, 1152, 1158, 1209, 1224, 1227, 1238, 1246, 1292, 1332, 1333, 1357, 1385, 1388, 1423, 1472, 1520, 1522, 1524, 1581, 1620]
# every time you run this code, re-generate larger 90
all_probs_imported = prbl.get_ltpFR2_precall(files_ltpFR2)
m_list_10 = m_list_10.get_m_list(larger_90, files_ltpFR2)

all_probs = np.array(all_probs_imported)
m_list_10 = np.array(m_list_10)




all_probs_final = []
m_list_10_final = []
slopes_participants = []



# For every participant, get their lists' values (552), mask NaNs from P_recs, find the slope through the 552 lists, add slopes into a new list
# Conduct a t-test to the slopes to see whether they're different from a zero distribution

for i in range(len(all_probs)):
    all_probs_part = all_probs[i]
    m_list_10_part = m_list_10[i]

    mask = np.isfinite(all_probs_part)
    all_probs_part = np.array(all_probs_part)[mask]
    all_list_ten_part = np.array(m_list_10_part)[mask]

    #print(len(all_probs_part))
    #print(len(all_num_top_ten_part))

    slope, intercept, r_value, p_value, std_err = scipy.stats.mstats.linregress(all_list_ten_part, all_probs_part)
    print(slope)

    slopes_participants.append(slope)
    all_probs_final.append(all_probs_part)
    m_list_10_final.append(all_list_ten_part)


#print((np.array(all_probs_final)))
#print((np.array(all_num_top_ten_final)))
print(len(slopes_participants))
print(slopes_participants)

t_test = scipy.stats.ttest_1samp(slopes_participants, 0, axis=0)
print(t_test)
"""

# Create data
#N = len(all_probs)
N = 75
x = np.zeros(N)
y = [-0.0061777530417805966, 0.0050265946438180376, -0.0016997151377576018, -0.00016291402633589476, -0.0063044079038275585, 0.0031707975256362393, 0.0037738051731839068, 0.0019094774174251152, -0.0077888994093511946, -0.0027754228735214536, 0.0047538007714998925, 0.0081279540850776599, -0.0022564048867738263, 0.0062297900733973201, 0.002293033717139206, -0.0043241763773185955, 0.0059244235695986398, -0.0015837042461801184, 0.0064378889996153836, -0.0023120557904249828, -0.0053388212837031743, -0.0024081863931466377, 0.0066222552865323114, 0.00052641850527959254, 0.0022286431035255139, -0.0024658954125986359, 0.0035537903263707371, 0.0033861626603562131, 0.0019625395950970959, 0.0064285564897310415, 0.0063185427959157976, -0.00082042662184336171, -0.0065041560225667823, 0.0066500067087079057, 0.0024158595373933041, 0.0022374768925560247, 0.0095319558119772892, 0.00040541775158741197, -0.0068049464799358715, 0.00068489915450380178, 0.008320496662465586, -0.0024302366268643648, -0.0010842914245683395, 0.0017165005537098552, 0.0038627423100620916, 0.0010401124756111569, -0.0017207500198530299, -0.00089540760272467819, 0.0032357982901531942, 0.0015738554830347607, -0.0011304813198086444, 0.0041836421781223966, 0.0020178954746572072, 0.003832900004126952, 0.0010346999955140254, -0.00064957321657600406, 0.0032489700504559566, 0.010008901184523272, 0.010208007766254659, 0.0084806373384866043, -0.0033157059944806419, -0.0013246787653993922, 0.0011152324431256209, -0.0034689345777537367, -0.0031142738785655136, 0.0035422978216137877, -0.0041796320148301492, 0.0021228743213532594, 0.00078547788362628014, -0.0025285449014262585, -0.0030005107252298355, 0.00062408223201174736, -0.0077438290186634604, 0.0064963588636267446, 0.00089784033841435059]


# Plot
plt.scatter(x, y, alpha=0.5)
#plt.title('Slopes')
plt.title("Slopes: Number of Highly Meaningful Words (MList) In Each List & P-Rec")
plt.ylim(-.011, .011)
plt.xticks([])
#plt.title("Slopes: Semantic Meaningfulness of List & P-Rec")
plt.show()

"""Output
75
[-0.0061777530417805966, 0.0050265946438180376, -0.0016997151377576018, -0.00016291402633589476, -0.0063044079038275585, 0.0031707975256362393, 0.0037738051731839068, 0.0019094774174251152, -0.0077888994093511946, -0.0027754228735214536, 0.0047538007714998925, 0.0081279540850776599, -0.0022564048867738263, 0.0062297900733973201, 0.002293033717139206, -0.0043241763773185955, 0.0059244235695986398, -0.0015837042461801184, 0.0064378889996153836, -0.0023120557904249828, -0.0053388212837031743, -0.0024081863931466377, 0.0066222552865323114, 0.00052641850527959254, 0.0022286431035255139, -0.0024658954125986359, 0.0035537903263707371, 0.0033861626603562131, 0.0019625395950970959, 0.0064285564897310415, 0.0063185427959157976, -0.00082042662184336171, -0.0065041560225667823, 0.0066500067087079057, 0.0024158595373933041, 0.0022374768925560247, 0.0095319558119772892, 0.00040541775158741197, -0.0068049464799358715, 0.00068489915450380178, 0.008320496662465586, -0.0024302366268643648, -0.0010842914245683395, 0.0017165005537098552, 0.0038627423100620916, 0.0010401124756111569, -0.0017207500198530299, -0.00089540760272467819, 0.0032357982901531942, 0.0015738554830347607, -0.0011304813198086444, 0.0041836421781223966, 0.0020178954746572072, 0.003832900004126952, 0.0010346999955140254, -0.00064957321657600406, 0.0032489700504559566, 0.010008901184523272, 0.010208007766254659, 0.0084806373384866043, -0.0033157059944806419, -0.0013246787653993922, 0.0011152324431256209, -0.0034689345777537367, -0.0031142738785655136, 0.0035422978216137877, -0.0041796320148301492, 0.0021228743213532594, 0.00078547788362628014, -0.0025285449014262585, -0.0030005107252298355, 0.00062408223201174736, -0.0077438290186634604, 0.0064963588636267446, 0.00089784033841435059]
Ttest_1sampResult(statistic=2.1826206471021039, pvalue=0.032237037232505587)
"""