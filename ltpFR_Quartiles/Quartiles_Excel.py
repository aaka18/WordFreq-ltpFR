import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from astropy.table import Table,Column
import math

# Array below is the word frequencies of all items in the word pool (of ltpFR) in an ascending order

array = [2	,
2	,
2	,
3	,
3	,
4	,
5	,
5	,
6	,
6	,
7	,
7	,
7	,
7	,
8	,
10	,
10	,
11	,
11	,
11	,
11	,
11	,
12	,
12	,
12	,
13	,
13	,
13	,
14	,
16	,
16	,
17	,
17	,
17	,
18	,
18	,
18	,
18	,
18	,
19	,
19	,
20	,
20	,
22	,
22	,
22	,
22	,
22	,
24	,
24	,
24	,
24	,
25	,
25	,
25	,
25	,
25	,
25	,
26	,
26	,
26	,
26	,
28	,
28	,
28	,
28	,
29	,
29	,
30	,
31	,
31	,
32	,
32	,
32	,
32	,
33	,
33	,
34	,
34	,
34	,
34	,
34	,
35	,
35	,
35	,
35	,
36	,
36	,
36	,
36	,
36	,
37	,
37	,
37	,
37	,
37	,
37	,
37	,
38	,
38	,
39	,
39	,
39	,
39	,
40	,
40	,
40	,
41	,
41	,
42	,
42	,
42	,
42	,
43	,
44	,
44	,
44	,
44	,
44	,
45	,
45	,
45	,
45	,
45	,
46	,
46	,
46	,
47	,
47	,
47	,
47	,
47	,
47	,
47	,
47	,
48	,
48	,
48	,
48	,
49	,
50	,
50	,
50	,
51	,
51	,
52	,
52	,
52	,
53	,
54	,
54	,
54	,
54	,
54	,
56	,
56	,
56	,
56	,
56	,
57	,
58	,
58	,
59	,
60	,
61	,
62	,
62	,
62	,
62	,
63	,
64	,
64	,
64	,
65	,
65	,
65	,
66	,
66	,
66	,
66	,
66	,
67	,
67	,
67	,
67	,
68	,
68	,
68	,
68	,
69	,
70	,
70	,
70	,
70	,
71	,
71	,
71	,
72	,
73	,
73	,
73	,
74	,
74	,
74	,
74	,
74	,
74	,
75	,
75	,
76	,
76	,
77	,
77	,
77	,
78	,
78	,
78	,
78	,
79	,
79	,
79	,
80	,
80	,
81	,
81	,
82	,
82	,
82	,
83	,
83	,
83	,
83	,
84	,
84	,
84	,
84	,
84	,
85	,
85	,
86	,
86	,
86	,
86	,
87	,
87	,
87	,
88	,
88	,
88	,
89	,
89	,
91	,
93	,
95	,
96	,
96	,
96	,
98	,
99	,
99	,
99	,
99	,
99	,
100	,
101	,
102	,
102	,
102	,
104	,
104	,
105	,
105	,
105	,
107	,
108	,
108	,
109	,
109	,
110	,
111	,
111	,
112	,
113	,
113	,
113	,
113	,
114	,
115	,
115	,
115	,
115	,
115	,
115	,
116	,
116	,
117	,
117	,
117	,
117	,
117	,
118	,
118	,
120	,
120	,
120	,
120	,
121	,
122	,
122	,
122	,
123	,
123	,
123	,
124	,
125	,
128	,
129	,
129	,
131	,
132	,
132	,
132	,
133	,
133	,
134	,
136	,
137	,
137	,
137	,
138	,
138	,
139	,
139	,
140	,
140	,
140	,
141	,
141	,
142	,
142	,
143	,
143	,
143	,
144	,
144	,
144	,
145	,
145	,
145	,
145	,
146	,
146	,
146	,
147	,
147	,
147	,
148	,
148	,
148	,
148	,
149	,
149	,
150	,
150	,
152	,
152	,
153	,
153	,
153	,
154	,
154	,
155	,
155	,
156	,
156	,
156	,
156	,
157	,
157	,
158	,
158	,
158	,
159	,
160	,
161	,
162	,
162	,
162	,
162	,
162	,
163	,
165	,
165	,
165	,
165	,
165	,
165	,
166	,
166	,
167	,
167	,
168	,
169	,
169	,
169	,
170	,
170	,
170	,
172	,
173	,
174	,
174	,
177	,
178	,
179	,
180	,
181	,
182	,
182	,
183	,
183	,
183	,
183	,
184	,
184	,
184	,
185	,
185	,
185	,
186	,
186	,
186	,
186	,
187	,
187	,
188	,
189	,
189	,
189	,
191	,
194	,
196	,
196	,
198	,
199	,
200	,
201	,
201	,
201	,
203	,
203	,
203	,
204	,
205	,
206	,
206	,
207	,
207	,
209	,
210	,
211	,
215	,
215	,
215	,
217	,
218	,
218	,
222	,
222	,
222	,
223	,
224	,
225	,
225	,
225	,
227	,
228	,
228	,
229	,
230	,
231	,
231	,
232	,
233	,
233	,
233	,
234	,
235	,
237	,
237	,
237	,
237	,
238	,
239	,
240	,
242	,
242	,
244	,
244	,
246	,
247	,
247	,
248	,
248	,
249	,
249	,
250	,
251	,
253	,
253	,
254	,
256	,
257	,
257	,
257	,
258	,
258	,
261	,
261	,
262	,
263	,
264	,
264	,
265	,
266	,
266	,
267	,
270	,
272	,
273	,
273	,
273	,
276	,
277	,
278	,
278	,
279	,
280	,
280	,
281	,
281	,
282	,
283	,
284	,
285	,
285	,
286	,
289	,
290	,
290	,
291	,
293	,
294	,
294	,
296	,
298	,
300	,
304	,
305	,
305	,
305	,
310	,
310	,
312	,
312	,
314	,
315	,
315	,
316	,
317	,
318	,
318	,
320	,
320	,
321	,
321	,
321	,
327	,
327	,
329	,
330	,
333	,
333	,
335	,
336	,
336	,
341	,
342	,
343	,
343	,
344	,
345	,
345	,
350	,
351	,
351	,
353	,
356	,
357	,
359	,
359	,
361	,
364	,
364	,
366	,
367	,
368	,
370	,
371	,
372	,
372	,
372	,
375	,
376	,
381	,
381	,
381	,
381	,
382	,
383	,
389	,
391	,
393	,
394	,
395	,
395	,
396	,
397	,
397	,
399	,
399	,
400	,
400	,
401	,
401	,
406	,
406	,
409	,
411	,
412	,
413	,
413	,
414	,
415	,
416	,
416	,
416	,
416	,
429	,
431	,
433	,
434	,
434	,
434	,
436	,
436	,
438	,
438	,
438	,
440	,
441	,
442	,
442	,
444	,
448	,
455	,
459	,
460	,
461	,
461	,
463	,
464	,
465	,
465	,
466	,
472	,
476	,
478	,
480	,
485	,
487	,
488	,
490	,
491	,
493	,
494	,
495	,
496	,
497	,
497	,
497	,
498	,
498	,
498	,
500	,
503	,
506	,
508	,
513	,
513	,
516	,
518	,
521	,
522	,
527	,
527	,
528	,
531	,
534	,
534	,
536	,
538	,
541	,
541	,
545	,
547	,
552	,
555	,
556	,
560	,
560	,
568	,
570	,
573	,
574	,
576	,
578	,
579	,
584	,
584	,
585	,
592	,
593	,
602	,
613	,
616	,
617	,
617	,
619	,
619	,
628	,
629	,
635	,
637	,
637	,
650	,
655	,
656	,
657	,
658	,
661	,
662	,
685	,
694	,
696	,
702	,
703	,
704	,
705	,
707	,
715	,
718	,
727	,
732	,
733	,
735	,
737	,
739	,
746	,
746	,
751	,
751	,
752	,
754	,
761	,
762	,
774	,
775	,
775	,
778	,
786	,
788	,
789	,
793	,
796	,
812	,
815	,
816	,
829	,
831	,
832	,
838	,
871	,
878	,
882	,
882	,
885	,
889	,
890	,
892	,
899	,
900	,
906	,
908	,
910	,
911	,
930	,
934	,
941	,
942	,
950	,
950	,
950	,
951	,
952	,
952	,
952	,
961	,
970	,
971	,
976	,
1000	,
1000	,
1003	,
1034	,
1061	,
1067	,
1074	,
1077	,
1098	,
1103	,
1116	,
1137	,
1138	,
1138	,
1159	,
1161	,
1164	,
1167	,
1183	,
1196	,
1209	,
1214	,
1214	,
1216	,
1219	,
1219	,
1227	,
1228	,
1233	,
1239	,
1250	,
1255	,
1280	,
1293	,
1299	,
1307	,
1313	,
1313	,
1327	,
1332	,
1368	,
1380	,
1381	,
1396	,
1398	,
1404	,
1414	,
1438	,
1464	,
1469	,
1473	,
1479	,
1483	,
1490	,
1503	,
1514	,
1518	,
1525	,
1525	,
1531	,
1546	,
1557	,
1559	,
1575	,
1589	,
1598	,
1610	,
1617	,
1631	,
1644	,
1664	,
1687	,
1721	,
1736	,
1738	,
1742	,
1753	,
1792	,
1840	,
1860	,
1860	,
1884	,
1905	,
1933	,
1938	,
1954	,
1983	,
2040	,
2074	,
2090	,
2155	,
2160	,
2166	,
2204	,
2225	,
2228	,
2246	,
2256	,
2259	,
2284	,
2333	,
2369	,
2372	,
2374	,
2374	,
2376	,
2405	,
2411	,
2422	,
2597	,
2689	,
2844	,
2872	,
2888	,
3020	,
3084	,
3087	,
3128	,
3281	,
3328	,
3526	,
3548	,
3587	,
3645	,
3720	,
3777	,
3791	,
4005	,
4090	,
4376	,
4460	,
4546	,
4624	,
4832	,
4872	,
4944	,
4944	,
4983	,
5019	,
5113	,
5243	,
5298	,
5879	,
5891	,
6036	,
6072	,
6669	,
6984	,
7200	,
7226	,
7356	,
7453	,
7645	,
7749	,
7889	,
8249	,
8601	,
11914	,
13345	,
15116	,
17486	,
17657	,
26215	]

print("Mean is = ", np.mean(array))
# print(array)
# print('Length of list of array_sorted:', len(array))
bins = []

# Finding bin edges by looking at the word pool in quartiles identifying the max bin values

p_25 = np.percentile(array, 25) # return 25th percentile
p_50 = np.percentile(array, 50) # return 50th percentile, e.g median.
p_75 = np.percentile(array, 75) # return 75th percentile, e.g median.
p_100 = np.percentile(array, 100) # return 100th percentile, e.g median.

print("25th percentile is:", p_25)
print("50th percentile is:", p_50)
print("75th percentile is:", p_75)
print("100th percentile is:", p_100)

# Appending max bin values to the list called bins
bins.append(p_25)
bins.append(p_50)
bins.append(p_75)
bins.append(p_100)
print(bins)

bin_zero = []
bin_one = []
bin_two = []
bin_three = []



# Add the word frequency values to their corresponding quartile bins depending on the max bin values

for i, freq in enumerate(array):
    if freq >= 2 and freq <= bins[0]:
        bin_zero.append([i, freq])
    elif (bins[0] < freq) and (freq <= bins[1]):
        bin_one.append([i, freq])
    elif (bins[1] < freq) and (freq <= bins[2]):
        bin_two.append([i, freq])
    elif (bins[2] < freq) and (freq <= bins[3]):
        bin_three.append([i, freq])

# Print lengths of each quartile/word bin
print(len(bin_zero))
print(len(bin_one))
print(len(bin_two))
print(len(bin_three))


# Sum of the lengths of each bin should be equal to the total number of words in the word pool
print((len(bin_zero) + len(bin_one) + len(bin_two) + len(bin_three)))

# Confirming that the max bin values match the initial max bin values
print("Bin Max Values")
print(array[246-1])
print(array[(246+246-1)])
print(array[(246+246+246-1)])
print(array[(246+246+246+246-1)])

# Finding the mean word frequency of each word bin/quartile
mean_zero = (np.mean(np.asarray(bin_zero), axis=0)[1])
mean_one = (np.mean(np.asarray(bin_one), axis=0)[1])
mean_two = (np.mean(np.asarray(bin_two), axis=0) [1])
mean_three = (np.mean(np.asarray(bin_three), axis=0)[1])


Bin = [1, 2, 3, 4]
Range = [" 2 - 87   ", " 88 - 237   ", " 238 - 617   ", "  618 - 26,215   "]
Means = [math.floor(mean_zero), round(mean_one), round(mean_two), round(mean_three)]
print(Means)

t = Table([Bin, Range, Means], names = ("Bin", "Range", "M"), dtype=('int', 'str', 'int'))
print('\033[1m' + "Table 1")
print("Frequency Information for Each Word Bin")
print('\033[0m')
print(t)
