import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from astropy.table import Table,Column
import math
import numpy.ma as ma
import w2vec.Final.semanticsim_each_word as mlist_import
# Array below is the word frequencies of all items in the word pool in an ascending order

concreteness = [4.57, 4.54, 3.61, 4.96, 4.87, 4.81, 4.86, 5, 4.87, 4.96, 4.7, np.nan, 4.79, 3.34, 4.26, 4.14, 5, 4.19, 4.9, 4.93, 4.92, 4.9, 4.78, 4.43, 4, 4.59, 4.86, 4.89, 4.92, 4.72, 4.63, 4.68, 4.74, 4.8, 5, 4.89, 4.68, 4.72, 4.93, 5, 4.25, 4.96, 4.77, 4.57, 4.79, 4.74, 4.9, 4.59, 5, 4.44, 4.9, 4.81, 4.89, 4.83, 4.86, 4.43, 4.43, 4.6, 4.96, 5, 4.18, 4.83, 4.97, 4.04, 4.44, 4.65, 4.75, 4.92, 4.96, 4.93, 4.68, 4.83, 4.81, 3.03, 4.86, 5, 4.92, 4.89, 4.86, 4.44, 4.64, 4.85, 4.68, 4.82, 4.6, 4.43, 4.24, 4.93, 4.78, 4.97, 4.9, 4.93, 4.21, 4.89, 4.53, 4.5, 5, 4.76, 4.54, 5, 4.4, 4.83, 4.61, 4.81, 4.89, 4.62, 3.89, 4.67, 4.66, 4.35, 4.15, 4.11, 4.32, 4.9, 4.4, 4.57, 4.85, 4.71, 4.17, 4.04, 3.82, 3.7, 4.72, 4.9, 4.61, 4.87, 4.07, 4.43, 4.86, 4.77, 3.55, 4.44, 4.81, 4.5, 4.79, 4.82, 4.85, 4.48, 5, 4.75, 4.79, 4.61, 4.79, 4.77, 4.93, 4.85, 4.82, 4.69, 4.96, 5, 3.54, 4.41, 4.96, 4.39, 4.6, 4.93, 4.96, 4.4, 4.76, 4.71, 4.48, 4.4, 5, 5, np.nan, 5, 3, np.nan, 2.85, 5, 4.54, 4.57, 4.81, 4.71, 5, 4.8, 4.68, 4.79, 5, 4.79, 3.81, 4.59, 4.26, 5, 5, 4.9, 4.73, 4.9, 4.76, 4.97, 4.03, 4.3, np.nan, 4.56, 4.87, 3.88, 3.07, 4.81, 4.59, 3.92, 3.93, 4.69, 4.73, 4.89, 4.88, 4.72, 3.82, 4.56, 4.85, 4.82, 4.59, 4.97, 4.38, 5, 4.56, 5, 4.61, 4.86, 3.17, 4.77, 4.04, 4.9, 4.85, 4.21, 4.72, 4.93, 4.85, 4.93, 4.93, 5, 4.52, 4.54, 4.92, 3.07, 4.72, 4.53, 4.88, 4.88, 4.79, 4.96, 5, 4.12, 4.48, 4.93, 4.11, 4.96, 4.66, 3.63, 4.73, 4.93, 4.19, 4.96, 4.41, 4.82, 5, np.nan, 4.93, 4.63, 3.75, 4.5, 4.66, 4.64, 3, 5, 4.96, 4.97, 4.92, 4.9, 4.9, 4.46, 4.85, 5, 4.33, 4.5, 4.88, 4.97, 4.56, 4.5, 4.82, 3.89, 4.83, 5, 4.97, 4.59, 4.69, 4.96, 4.9, 4.68, 4.68, 4, 4.32, np.nan, 3.68, 4.83, 4.56, 4.31, 4.25, 5, 4.57, 4.59, 4.46, 4.25, 4.62, 4.7, 4.48, 4.48, 4.85, 4.96, 4.14, 5, 4.9, 4.89, 3.97, 4.57, 4.92, 4.83, 3.15, 4.54, 3.72, 4.97, 4.93, 4.84, 4.78, 4.72, 4.93, 4.93, 4.96, 2.69, 4.9, 4.1, 4.92, 4.21, 4.39, 4.93, 4.5, 4.93, 4.86, 4.66, 4.92, 4.61, 4.12, 3.61, 4.86, 4.85, 3.5, 4.72, 4.52, 4.8, 4.93, 4.57, 4.93, 4.93, 4.56, 5, 4.77, 3.53, 3.8, 4.86, 4.97, 2.5, 3.86, 4.9, 4.89, 4.86, 4.87, 4.44, 5, 4.59, 4.1, 4.66, 3.43, 4.9, 4.83, 4.52, 4.71, 4.4, 4.67, 4.77, 4.89, 4.81, 5, 4.23, 4.59, 4.77, 4.77, 4.44, 4.93, np.nan, 4.68, 4.36, 4.27, 4.79, 5, 4.79, 4.9, 4.73, 4.37, 4.76, 4.7, 4.5, 4.44, 4.72, 3, 4.9, 4.67, 4.55, 4.78, 4.65, 4.43, 4.45, 4.93, 4.26, 4.87, 5, 4.07, 4.9, 3.07, 4.86, 4.15, 3.3, 3.92, 4.85, 4.89, 4.31, 4.61, 4.65, 4.73, 4.43, 4.75, 4.79, 4.52, 4.85, 4.97, 4.81, 4.89, 4.9, 4.88, 4.61, 4.86, 4.68, 4.97, 4.85, 4.55, 4.1, 4.79, 4.83, 5, 4.63, 4.64, 4.55, 4.93, 4.96, 4.64, 4.5, 4.94, 4.41, 4.82, 4.93, 4.97, 4.92, 4.37, 4.96, 4.7, 4, 4.56, 4.73, 4.82, 4.48, 4.48, 4.07, 4.64, 4.14, 4.36, 4.93, 5, 4.97, 4.89, 3.54, 4.85, 4.83, 4.97, 5, 4.62, 4.96, 3.85, 4.21, 4.72, 4.7, 4.34, 4.69, 4.93, 4.67, 4.89, 4.72, 4.96, 4.5, 4.92, 4.86, 4.97, 4.21, 4.69, 4.54, 4.63, 4.08, 2.59, 4.96, 4.77, 4.07, 4.93, 4.9, 4.82, 3.27, 4.93, 4.52, 4.53, 4.7, 4.37, 4.83, 4.64, 4.68, 4.9, 4.71, 4.87, 4.59, 5, 3.77, 3.79, 4.46, 4.14, 4.9, 4.72, 4.84, 4.86, 4.82, 4.89, 4.79, 5, 4.68, 4.96, 4.75, 4.44, 4.41, 4.69, 4.27, 4.24, 3.46, 4.72, 4.83, 4.44, 4.54, 3.59, np.nan, 3.48, 4.89, 4.67, 4.56, 4.67, 4.7, 4.96, 4.89, 4.42, 4.33, 4.13, 4.86, 4.07, 4.46, 4.59, 4.36, 4.93, 4.93, 3.96, 4.97, 4.93, 4.78, 4.86, 4.83]
# concreteness_masked = ma.masked_invalid(concreteness)
# concreteness_masked = np.sort(concreteness_masked)
# concreteness_masked_final= (concreteness_masked[:568])
# print(concreteness_masked_final)

m_list = [0.126722957524 ,
0.12388056235 ,
0.121806274268 ,
0.128345455075 ,
0.124862508503 ,
0.125484200618 ,
0.127126556544 ,
0.130814782736 ,
0.129642419996 ,
0.125229932868 ,
0.123323160722 ,
0.120458102989 ,
0.122819372795 ,
0.123229497744 ,
0.120330069062 ,
0.119382657821 ,
0.128925273696 ,
0.121243728561 ,
0.128574031959 ,
0.123219036727 ,
0.126138437391 ,
0.127348187813 ,
0.125090586747 ,
0.122958771358 ,
0.125355274069 ,
0.126654646682 ,
0.125058846813 ,
0.127170554636 ,
0.13142968079 ,
0.126290847118 ,
0.12882418292 ,
0.130583399077 ,
0.125475659332 ,
0.129985584906 ,
0.127880766959 ,
0.124442385909 ,
0.127253337486 ,
0.125022745397 ,
0.13009262181 ,
0.127267287381 ,
0.119477423602 ,
0.128690943021 ,
0.121029079747 ,
0.122526179463 ,
0.12581692205 ,
0.126189548834 ,
0.124403366836 ,
0.127037349212 ,
0.124298638279 ,
0.121577450821 ,
0.121727168178 ,
0.128321602109 ,
0.126244399883 ,
0.125342713302 ,
0.125667690784 ,
0.124710086449 ,
0.126403353031 ,
0.122612360158 ,
0.127964839556 ,
0.127062404863 ,
0.125543956447 ,
0.127457365624 ,
0.130266593548 ,
0.122011611909 ,
0.127225380465 ,
0.127118656505 ,
0.13104514806 ,
0.127043914347 ,
0.128937225208 ,
0.125993090575 ,
0.125807637893 ,
0.126090445731 ,
0.125213268596 ,
0.119905507473 ,
0.126617067571 ,
0.128644000336 ,
0.12682841887 ,
0.1257799729 ,
0.126890681715 ,
0.125502725521 ,
0.128453875666 ,
0.127985852955 ,
0.125188061119 ,
0.124801647426 ,
0.126514649123 ,
0.125564229345 ,
0.121497667651 ,
0.12894244217 ,
0.128905555901 ,
0.128964697178 ,
0.125841846789 ,
0.129965395988 ,
0.128916529392 ,
0.128135140999 ,
0.124198704815 ,
0.125288798752 ,
0.123012872488 ,
0.127346498625 ,
0.122268013891 ,
0.131804607293 ,
0.125628732186 ,
0.125874268985 ,
0.126199929635 ,
0.126446903429 ,
0.125558826825 ,
0.120590296991 ,
0.124377246686 ,
0.126134264355 ,
0.125729897814 ,
0.122774311274 ,
0.120848080324 ,
0.123477311746 ,
0.128664956954 ,
0.128452484442 ,
0.127864442373 ,
0.128843429007 ,
0.127201396416 ,
0.12879068585 ,
0.121155274125 ,
0.122196675546 ,
0.119493583333 ,
0.12752000153 ,
0.125947973596 ,
0.131226878465 ,
0.124459725072 ,
0.128489854945 ,
0.13112747483 ,
0.127275675298 ,
0.130123354554 ,
0.124874913445 ,
0.121048601464 ,
0.119978439269 ,
0.123654232492 ,
0.126545159933 ,
0.127412862399 ,
0.124750008853 ,
0.130046058409 ,
0.120607155615 ,
0.129490338733 ,
0.126897694908 ,
0.127503033679 ,
0.126282396939 ,
0.128217428796 ,
0.124901697921 ,
0.125871648522 ,
0.125194422137 ,
0.127901975368 ,
0.12514017208 ,
0.12795568756 ,
0.128408154884 ,
0.121962521793 ,
0.125116187904 ,
0.127905227445 ,
0.128171744797 ,
0.118438776778 ,
0.128831860089 ,
0.128815289524 ,
0.123340666341 ,
0.128670503824 ,
0.123301156686 ,
0.120131188895 ,
0.126965303408 ,
0.126692922634 ,
0.128984109615 ,
0.124588442808 ,
0.12574981799 ,
0.121997824322 ,
0.11985163051 ,
0.120581532714 ,
0.12404602209 ,
0.12717407879 ,
0.1260141869 ,
0.122856760027 ,
0.124644501586 ,
0.126041191807 ,
0.129110142509 ,
0.127865359064 ,
0.124029874745 ,
0.127594698139 ,
0.128527331139 ,
0.119476280574 ,
0.1304602273 ,
0.128075132488 ,
0.132423247267 ,
0.127815749334 ,
0.124968964695 ,
0.122432439736 ,
0.130526447319 ,
0.12519469254 ,
0.128922218011 ,
0.12408627082 ,
0.122869692752 ,
0.118450531717 ,
0.130666479243 ,
0.128889464947 ,
0.125865103189 ,
0.127364718018 ,
0.12952450793 ,
0.128191486813 ,
0.12764563418 ,
0.127641515543 ,
0.125211090635 ,
0.13000000058 ,
0.1309194763 ,
0.124363986692 ,
0.126680574455 ,
0.124754150478 ,
0.12560832459 ,
0.129833660074 ,
0.128603333647 ,
0.119483638057 ,
0.128078432047 ,
0.127223886905 ,
0.128159141629 ,
0.125522151693 ,
0.124763242973 ,
0.126439719852 ,
0.130236793428 ,
0.125767875502 ,
0.124589601279 ,
0.123994192579 ,
0.128128412725 ,
0.125009983994 ,
0.120605089452 ,
0.125832181861 ,
0.129993035497 ,
0.127211176896 ,
0.124595471369 ,
0.125058141957 ,
0.129185104529 ,
0.125611469931 ,
0.124050471606 ,
0.128605097446 ,
0.124161078623 ,
0.122633107544 ,
0.125045670203 ,
0.129993125581 ,
0.128154344602 ,
0.124978942505 ,
0.128686632713 ,
0.129692806794 ,
0.124940814515 ,
0.125537210062 ,
0.123275855565 ,
0.129578092046 ,
0.122199709095 ,
0.124085223764 ,
0.124784882764 ,
0.126348190987 ,
0.130087450603 ,
0.123793396873 ,
0.124365814188 ,
0.126183768482 ,
0.120692410521 ,
0.128898331933 ,
0.130893536189 ,
0.130294124099 ,
0.12309698271 ,
0.124546450571 ,
0.126605876487 ,
0.128399357563 ,
0.123410788474 ,
0.125064672896 ,
0.125057686757 ,
0.125704674306 ,
0.132260244285 ,
0.129585433098 ,
0.128066481182 ,
0.130406321753 ,
0.123063986768 ,
0.127791508694 ,
0.123516310721 ,
0.128837710572 ,
0.127895481551 ,
0.126650425449 ,
0.12776670055 ,
0.126343195362 ,
0.122306393444 ,
0.126842873346 ,
0.120161654383 ,
0.125339228335 ,
0.128560891147 ,
0.129691729292 ,
0.123631426234 ,
0.127881561696 ,
0.125601750827 ,
0.128511188071 ,
0.128171578815 ,
0.131865750975 ,
0.126835219715 ,
0.127034208689 ,
0.120216104598 ,
0.127484240632 ,
0.127341758447 ,
0.124260323968 ,
0.123947611815 ,
0.125177580128 ,
0.125198191612 ,
0.126907392901 ,
0.127807391873 ,
0.126775887216 ,
0.121944716864 ,
0.12492431575 ,
0.119111010764 ,
0.123811298587 ,
0.12107118614 ,
0.125018628673 ,
0.130226998609 ,
0.121332926228 ,
0.128786326133 ,
0.128966810797 ,
0.122317052516 ,
0.120849236149 ,
0.127654043541 ,
0.127992658249 ,
0.126245877795 ,
0.127850830937 ,
0.121292903379 ,
0.129400578766 ,
0.123943546624 ,
0.12682181108 ,
0.12549323866 ,
0.133339642619 ,
0.129980350198 ,
0.126098833768 ,
0.127433624353 ,
0.127069726321 ,
0.121091607333 ,
0.132907668956 ,
0.1250852354 ,
0.122571280432 ,
0.12071423311 ,
0.125752679534 ,
0.122993623876 ,
0.127433667386 ,
0.129566834227 ,
0.130449178681 ,
0.129367280142 ,
0.129386239593 ,
0.12490712401 ,
0.1236870649 ,
0.121988735402 ,
0.127301550796 ,
0.129116399404 ,
0.122469068381 ,
0.121365059393 ,
0.125667744251 ,
0.127755560776 ,
0.129885451369 ,
0.127084410057 ,
0.128990417177 ,
0.124845730058 ,
0.124272598447 ,
0.127261922001 ,
0.131253554029 ,
0.119567088043 ,
0.117654307956 ,
0.12828478419 ,
0.131107796894 ,
0.122636964467 ,
0.120306240478 ,
0.130509060361 ,
0.126411718524 ,
0.129907506414 ,
0.127786076785 ,
0.124968800222 ,
0.130238072226 ,
0.126706736811 ,
0.125788013336 ,
0.126529729936 ,
0.12200493952 ,
0.127137148934 ,
0.126714858103 ,
0.125059085278 ,
0.129540839208 ,
0.125457325659 ,
0.121141574899 ,
0.130433641346 ,
0.127579221312 ,
0.1248137877 ,
0.131268468241 ,
0.128347722703 ,
0.127619981879 ,
0.127166582075 ,
0.122768698336 ,
0.122912305929 ,
0.127162888691 ,
0.119815209636 ,
0.12813610292 ,
0.12313338618 ,
0.127337385263 ,
0.122853607244 ,
0.129314396256 ,
0.128046307228 ,
0.124956251097 ,
0.129713944519 ,
0.121239205623 ,
0.126864053624 ,
0.124608519193 ,
0.126361114526 ,
0.126357035857 ,
0.127644940829 ,
0.121793276177 ,
0.130459428836 ,
0.129869142165 ,
0.122660857544 ,
0.132171026706 ,
0.130834725078 ,
0.118158552824 ,
0.127513295644 ,
0.132784187227 ,
0.124917917934 ,
0.131940523271 ,
0.1223863272 ,
0.12573147264 ,
0.127818454571 ,
0.124470007466 ,
0.121222305164 ,
0.119185882921 ,
0.123064453376 ,
0.118908689624 ,
0.127503939751 ,
0.125954763614 ,
0.127571820192 ,
0.128806566408 ,
0.128663157157 ,
0.121863186368 ,
0.128406053143 ,
0.130540173066 ,
0.126089369306 ,
0.125155389819 ,
0.125204500769 ,
0.131431733843 ,
0.129728583491 ,
0.126291496732 ,
0.129576293993 ,
0.130756498575 ,
0.12844685621 ,
0.127065044918 ,
0.129012207508 ,
0.130319149614 ,
0.127542304481 ,
0.126987357431 ,
0.124768493047 ,
0.129030335128 ,
0.126549875105 ,
0.128650180952 ,
0.123160966715 ,
0.124557257932 ,
0.125995860881 ,
0.124908790029 ,
0.123766109313 ,
0.121814976211 ,
0.122977205322 ,
0.12815948665 ,
0.130986240868 ,
0.125163996542 ,
0.12466434992 ,
0.126561964979 ,
0.128615752414 ,
0.12571122956 ,
0.125509038986 ,
0.127755526774 ,
0.126786819125 ,
0.124647296634 ,
0.128241122804 ,
0.12758759178 ,
0.12200491085 ,
0.12652638393 ,
0.127215888682 ,
0.126216850448 ,
0.12345901357 ,
0.12744554268 ,
0.130671818418 ,
0.13193230175 ,
0.127136375524 ,
0.12490994008 ,
0.120334340395 ,
0.127815200175 ,
0.128760662054 ,
0.129483116821 ,
0.128532996507 ,
0.127051094417 ,
0.132660341332 ,
0.126652477464 ,
0.119731642845 ,
0.12334059263 ,
0.123922799405 ,
0.121804891118 ,
0.120514600615 ,
0.127610030329 ,
0.126841240534 ,
0.127785912649 ,
0.130760427421 ,
0.130569377639 ,
0.121711464843 ,
0.123946459753 ,
0.123873785369 ,
0.128429043832 ,
0.120161972093 ,
0.124614494152 ,
0.125444645728 ,
0.127350905076 ,
0.120133393615 ,
0.123591208218 ,
0.128237416845 ,
0.124350701311 ,
0.121175760174 ,
0.13094099873 ,
0.12414887847 ,
0.124220351648 ,
0.128348401577 ,
0.124071179744 ,
0.124389913276 ,
0.126733076521 ,
0.126301038467 ,
0.12782300188 ,
0.124876550475 ,
0.125046420097 ,
0.127248989762 ,
0.130015297856 ,
0.127609363978 ,
0.127538095513 ,
0.124805852667 ,
0.128465450599 ,
0.124720411638 ,
0.124673748307 ,
0.126865493299 ,
0.125391530405 ,
0.123740056089 ,
0.129091259953 ,
0.129365134352 ,
0.125639420839 ,
0.12557465227 ,
0.131683364498 ,
0.128543469982 ,
0.132371244465 ,
0.129087141643 ,
0.128004682546 ,
0.129361947037 ,
0.125873911123 ,
0.124719724779 ,
0.123975030401 ,
0.122603973434 ,
0.12576681163 ,
0.129077179508 ,
0.123349126682 ,
0.125928911081 ,
0.129415221816 ,
0.123120893362 ,
0.125678444854 ,
0.126277015981 ,
0.124939462792 ,
0.127579358117 ,
0.126599169741 ,
0.129918778946 ,
0.127666273943 ,
0.128020639186 ,
0.129976090607 ,
0.129492948066 ,
0.12542010709 ,
0.128909286198 ,
0.124848215174 ,
0.124944131928 ,
0.123022259564 ,
0.130724596817 ,
0.124757456502 ,
0.120824696392 ,
0.127201762315 ,
0.126006361988 ,
0.125382560367 ,
0.122381015216 ,
0.125486648915 ,
0.128340450505 ,
0.127477917729 ,
0.128082316963]

mlist = np.array(m_list)
print(np.shape(mlist))

mask = np.logical_not(np.isnan(concreteness))
mlist_masked = np.array(mlist)[mask]
print(len(mlist_masked))
mlist_masked = np.sort(mlist_masked)
mlist_masked_final= (mlist_masked[:568])
print(mlist_masked_final)
# print(len(x_ltpFR))
# plt.hist(x_ltpFR, bins =10)
# plt.suptitle('ltpFR Word Pool Binned With ltpFR Bin Boundaries', fontsize=20)
# plt.xlabel('Bins 1 Through 10', fontsize=18)
# plt.ylabel('Total Number of Words In Each Word Bin', fontsize=16)
# plt.xticks([])
# plt.show()

print("Mean is = ", np.mean(mlist_masked_final))
print('Length of list of array_sorted:', len(mlist_masked_final))

bin_edges = []

# Finding bin edges by looking at the word pool in groups of 1/10 and identifying the max bin values
for i in range(1,21):
    edge = mlist_masked_final[int(i*len(mlist_masked_final)/20)-1]
    bin_edges.append(edge)

print("Bins",bin_edges)
print("Len", len(bin_edges))
bin_zero = []
bin_one = []
bin_two = []
bin_three = []
bin_four = []
bin_five = []
bin_six = []
bin_seven = []
bin_eight = []
bin_nine = []
bin_ten = []
bin_eleven = []
bin_twelve = []
bin_thirteen = []
bin_fourteen = []
bin_fifteen = []
bin_sixteen = []
bin_seventeen = []
bin_eighteen = []
bin_nineteen = []


# Add the word frequency values to their corresponding bins depending on the max bin values
for i, freq in enumerate(mlist_masked_final):
    if freq >= 0 and freq <= bin_edges[0]:
        bin_zero.append([i, freq])
    elif (bin_edges[0] < freq) and (freq <= bin_edges[1]):
        bin_one.append([i, freq])
    elif (bin_edges[1] < freq) and (freq <= bin_edges[2]):
        bin_two.append([i, freq])
    elif (bin_edges[2] < freq) and (freq <= bin_edges[3]):
        bin_three.append([i, freq])
    elif (bin_edges[3] < freq) and (freq <= bin_edges[4]):
        bin_four.append([i, freq])
    elif (bin_edges[4] < freq) and (freq <= bin_edges[5]):
        bin_five.append([i, freq])
    elif (bin_edges[5] < freq) and (freq <= bin_edges[6]):
        bin_six.append([i, freq])
    elif (bin_edges[6] < freq) and (freq <= bin_edges[7]):
        bin_seven.append([i, freq])
    elif (bin_edges[7] < freq) and (freq <= bin_edges[8]):
        bin_eight.append([i, freq])
    elif (bin_edges[8] < freq) and (freq  <= bin_edges[9]):
        bin_nine.append([i, freq])
    elif (bin_edges[9] < freq) and (freq <= bin_edges[10]):
        bin_ten.append([i, freq])
    elif (bin_edges[10] < freq) and (freq <= bin_edges[11]):
        bin_eleven.append([i, freq])
    elif (bin_edges[11] < freq) and (freq <= bin_edges[12]):
        bin_twelve.append([i, freq])
    elif (bin_edges[12] < freq) and (freq <= bin_edges[13]):
        bin_thirteen.append([i, freq])
    elif (bin_edges[13] < freq) and (freq <= bin_edges[14]):
        bin_fourteen.append([i, freq])
    elif (bin_edges[14] < freq) and (freq <= bin_edges[15]):
        bin_fifteen.append([i, freq])
    elif (bin_edges[15] < freq) and (freq <= bin_edges[16]):
        bin_sixteen.append([i, freq])
    elif (bin_edges[16] < freq) and (freq <= bin_edges[17]):
        bin_seventeen.append([i, freq])
    elif (bin_edges[17] < freq) and (freq  <= bin_edges[18]):
        bin_eighteen.append([i, freq])
    else:
        bin_nineteen.append([i, freq])
# Print lengths of each bin
#
print(len(bin_zero))
print(len(bin_one))
print(len(bin_two))
print(len(bin_three))
print(len(bin_four))
print(len(bin_five))
print(len(bin_six))
print(len(bin_seven))
print(len(bin_eight))
print(len(bin_nine))
print(len(bin_ten))
print(len(bin_eleven))
print(len(bin_twelve))
print(len(bin_thirteen))
print(len(bin_fourteen))
print(len(bin_fifteen))
print(len(bin_sixteen))
print(len(bin_seventeen))
print(len(bin_eighteen))
print(len(bin_nineteen))

# Sum of the lengths of each bin should be equal to the total number of words in the word pool
print((len(bin_zero) + len(bin_one) + len(bin_two) + len(bin_three) + len(bin_four) + len(bin_five) + len(bin_six) + len(bin_seven) + len(bin_eight) + len(bin_nine) + len(bin_ten)+
       len(bin_eleven) + len(bin_twelve) + len(bin_thirteen) + len(bin_fourteen) + len(bin_fifteen) + len(bin_sixteen) + len(bin_seventeen) + len(bin_eighteen) + len(bin_nineteen )))

# print((len(bin_zero) + len(bin_one) + len(bin_two) + len(bin_three) + len(bin_four) + len(bin_five) + len(bin_six) + len(bin_seven) + len(bin_eight) + len(bin_nine) + len(bin_ten)
#        + len(bin_eleven) + len(bin_twelve) + len(bin_thirteen)))

# Finding the mean word frequency of each word bin
mean_zero = (np.mean(np.asarray(bin_zero), axis=0)[1])
mean_one = (np.mean(np.asarray(bin_one), axis=0)[1])
mean_two = (np.mean(np.asarray(bin_two), axis=0) [1])
mean_three = (np.mean(np.asarray(bin_three), axis=0)[1])
mean_four = (np.mean(np.asarray(bin_four), axis=0) [1])
mean_five = (np.mean(np.asarray(bin_five), axis=0)[1])
mean_six = (np.mean(np.asarray(bin_six), axis=0)[1])
mean_seven = (np.mean(np.asarray(bin_seven), axis=0)[1])
mean_eight = (np.mean(np.asarray(bin_eight), axis=0)[1])
mean_nine = (np.mean(np.asarray(bin_nine), axis=0) [1])
mean_ten = (np.mean(np.asarray(bin_ten), axis=0) [1])
mean_eleven = (np.mean(np.asarray(bin_eleven), axis=0) [1])
mean_twelve = (np.mean(np.asarray(bin_twelve), axis=0) [1])
mean_thirteen = (np.mean(np.asarray(bin_thirteen), axis=0)[1])
mean_fourteen = (np.mean(np.asarray(bin_fourteen), axis=0) [1])
mean_fifteen = (np.mean(np.asarray(bin_fifteen), axis=0)[1])
mean_sixteen = (np.mean(np.asarray(bin_sixteen), axis=0)[1])
mean_seventeen = (np.mean(np.asarray(bin_seventeen), axis=0)[1])
mean_eightteen = (np.mean(np.asarray(bin_eighteen), axis=0)[1])
mean_nineteen = (np.mean(np.asarray(bin_nineteen), axis=0) [1])
# Creating a table: Frequency Information for Each Word Bin

M = [mean_zero, mean_one, mean_two, mean_three,mean_four, mean_five,mean_six, mean_seven, mean_eight, mean_nine, mean_ten,
     mean_eleven, mean_twelve, mean_thirteen, mean_fourteen, mean_fifteen, mean_sixteen, mean_seventeen, mean_eightteen, mean_nineteen]

# M = [mean_zero, mean_one, mean_two, mean_three,mean_four, mean_five,mean_six, mean_seven, mean_eight, mean_nine, mean_ten,
#      mean_eleven, mean_twelve, mean_thirteen]

print(M)

for i in M:
    print(i)
