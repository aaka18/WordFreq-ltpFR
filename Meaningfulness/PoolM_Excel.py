import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from astropy.table import Table,Column
import math
import numpy.ma as ma
from w2vec import semanticism_each_word_ave as m_list
import scipy.io
import glob

# Array below is the word frequencies of all items in the word pool in an ascending order

# files_ltpFR2 = glob.glob('/Users/adaaka/rhino_mount/data/eeg/scalp/ltp/ltpFR2/behavioral/data/stat_data_LTP*.mat')
# m_list = m_list.all_parts_list_correlations(files_ltpFR2)

meaningfulness =[0.0962202556868 ,
0.0929904037893 ,
0.0563538916114 ,
0.124674948573 ,
0.0797804936218 ,
0.0874133907592 ,
0.134530008509 ,
0.153191014682 ,
0.146705607464 ,
0.0964726096063 ,
0.0904804108001 ,
0.0492680228536 ,
0.0992424672031 ,
0.0782811786477 ,
0.0408596978182 ,
0.0286298650571 ,
0.150642276086 ,
0.0500620910691 ,
0.135014620349 ,
0.104522861333 ,
0.115428629892 ,
0.12695665781 ,
0.082454196538 ,
0.0856689601039 ,
0.0801457026337 ,
0.0994135407122 ,
0.105585310898 ,
0.105509377415 ,
0.152286483435 ,
0.137579332103 ,
0.120531349178 ,
0.147608862324 ,
0.086611828246 ,
0.146857323548 ,
0.133542261624 ,
0.122008008245 ,
0.104691285915 ,
0.109760273391 ,
0.136220732166 ,
0.124433588565 ,
0.0488755635743 ,
0.137693416718 ,
0.0557288111792 ,
0.0367626719989 ,
0.11828186044 ,
0.111844526661 ,
0.0985049596125 ,
0.132963555479 ,
0.0865874079035 ,
0.0948312850067 ,
0.0675187805614 ,
0.139884988704 ,
0.103356658423 ,
0.120535576761 ,
0.13569146022 ,
0.0950186027438 ,
0.103992734308 ,
0.0768583670323 ,
0.137150794656 ,
0.109282063664 ,
0.113176961162 ,
0.116451548321 ,
0.162552008113 ,
0.0493359817821 ,
0.125044470705 ,
0.140004148653 ,
0.15133774577 ,
0.118550985035 ,
0.111159392577 ,
0.127658224824 ,
0.0995686896495 ,
0.130990882779 ,
0.110259372381 ,
0.0568784196105 ,
0.109676493839 ,
0.1171566559 ,
0.0961287992746 ,
0.114586154191 ,
0.122279040225 ,
0.091916528301 ,
0.104847232717 ,
0.0984958728803 ,
0.102785846452 ,
0.0980829798422 ,
0.102601161656 ,
0.115639873722 ,
0.0839879777528 ,
0.129878435268 ,
0.133322693235 ,
0.153714854872 ,
0.0996799108459 ,
0.134535361423 ,
0.109287088664 ,
0.13196733475 ,
0.0616919708139 ,
0.099729507224 ,
0.0748715988729 ,
0.132268797421 ,
0.0715978574604 ,
0.138002900666 ,
0.100387949115 ,
0.103704830618 ,
0.0993587602955 ,
0.121705619366 ,
0.119041452467 ,
0.0755715189432 ,
0.0975110831906 ,
0.115718231802 ,
0.103351623349 ,
0.0621807363286 ,
0.0282898433519 ,
0.0912602598254 ,
0.128012628282 ,
0.100677175731 ,
0.12113742656 ,
0.132678407931 ,
0.123700132576 ,
0.139981451417 ,
0.0658687090301 ,
0.0678735094651 ,
0.0629801945987 ,
0.12075607866 ,
0.121893630487 ,
0.151226515465 ,
0.102662325809 ,
0.147813150043 ,
0.166686073366 ,
0.135255107703 ,
0.13199029855 ,
0.0765567886527 ,
0.0485584929464 ,
0.0571597579235 ,
0.0810724476344 ,
0.0975446948719 ,
0.133642412415 ,
0.085604945861 ,
0.155899867149 ,
0.0697793969776 ,
0.131217263051 ,
0.106018135441 ,
0.103094132774 ,
0.101149131515 ,
0.126995874975 ,
0.0946578870505 ,
0.109583962356 ,
0.0935928936039 ,
0.142772478923 ,
0.100843408452 ,
0.131343266658 ,
0.146705438305 ,
0.0729569700958 ,
0.0965861724326 ,
0.150209833643 ,
0.14333045412 ,
0.0484386961097 ,
0.131093748889 ,
0.170974264343 ,
0.0590826183735 ,
0.113431863936 ,
0.0909358940944 ,
0.0681836538845 ,
0.102651681208 ,
0.127632750012 ,
0.121690009722 ,
0.0794615885765 ,
0.102069631219 ,
0.0769065959849 ,
0.0398046324766 ,
0.0447295370522 ,
0.0793708479525 ,
0.112735092596 ,
0.0832791919316 ,
0.0850404998698 ,
0.0874491551346 ,
0.102599095152 ,
0.135838193143 ,
0.142035890407 ,
0.0966651195033 ,
0.138317953118 ,
0.14194954424 ,
0.049407327947 ,
0.130213371677 ,
0.127228510297 ,
0.164674425057 ,
0.135849433696 ,
0.103823393467 ,
0.0810838285766 ,
0.138695820937 ,
0.101183933946 ,
0.156015752909 ,
0.0901337271224 ,
0.0924561576647 ,
0.0548104737891 ,
0.145661270251 ,
0.139684907765 ,
0.110626921751 ,
0.122207871025 ,
0.133793672747 ,
0.130209374978 ,
0.102848798064 ,
0.103485951256 ,
0.108571191154 ,
0.146686069685 ,
0.146819268222 ,
0.0865739185657 ,
0.114223241304 ,
0.0932668475145 ,
0.105382613741 ,
0.149091416397 ,
0.136237124195 ,
0.0464038815957 ,
0.124776413397 ,
0.133578557252 ,
0.133236594832 ,
0.0910580200537 ,
0.112966071118 ,
0.118335317441 ,
0.131233427901 ,
0.119241755184 ,
0.0820912702473 ,
0.0703867254982 ,
0.124341335396 ,
0.0812943342035 ,
0.0489380757375 ,
0.103983695465 ,
0.152114921896 ,
0.106975398896 ,
0.0961473343514 ,
0.0929094527725 ,
0.123634574381 ,
0.0920101697517 ,
0.0743604701705 ,
0.128519703857 ,
0.0929117240568 ,
0.0938267496745 ,
0.120369589083 ,
0.154852294087 ,
0.126493952351 ,
0.0895027448691 ,
0.129395450123 ,
0.12941423553 ,
0.100168261047 ,
0.101097689124 ,
0.0852807178102 ,
0.126896389908 ,
0.0655396151394 ,
0.0756294401948 ,
0.111891871833 ,
0.118542305015 ,
0.119491107842 ,
0.108609826701 ,
0.0967576425759 ,
0.101182519058 ,
0.0625407545716 ,
0.118812327618 ,
0.137291889989 ,
0.148159633999 ,
0.0702352898468 ,
0.0756367068324 ,
0.0958710953497 ,
0.113006647654 ,
0.0702196132324 ,
0.0948753411753 ,
0.137369079959 ,
0.110939692885 ,
0.156016851687 ,
0.159855263753 ,
0.144067223237 ,
0.148344415681 ,
0.065107372154 ,
0.119983518965 ,
0.0873410216689 ,
0.139224421933 ,
0.107175441007 ,
0.126020704961 ,
0.130471950542 ,
0.102833021333 ,
0.076081017478 ,
0.111128074333 ,
0.0378448048618 ,
0.112332878279 ,
0.139283878921 ,
0.146813613268 ,
0.0756064182399 ,
0.144777432059 ,
0.100792280451 ,
0.122921445244 ,
0.114885622634 ,
0.175128073157 ,
0.0911724812854 ,
0.109943247694 ,
0.0541166776984 ,
0.138896496762 ,
0.115515274168 ,
0.0942306536334 ,
0.111748208258 ,
0.112856322867 ,
0.119502681314 ,
0.124820330641 ,
0.140114576101 ,
0.133555989924 ,
0.0719664224939 ,
0.0916767019793 ,
0.0498375122797 ,
0.11331026323 ,
0.0413402100697 ,
0.126338507681 ,
0.121344616816 ,
0.0656809432917 ,
0.134769717814 ,
0.134267076676 ,
0.0916751184678 ,
0.0500645651488 ,
0.108442419162 ,
0.11463227294 ,
0.0755042949861 ,
0.124251932786 ,
0.0760071924225 ,
0.114705667883 ,
0.0812761927464 ,
0.108160685176 ,
0.0821635887927 ,
0.161171890207 ,
0.157233546208 ,
0.112887995905 ,
0.144778401775 ,
0.151203510737 ,
0.0533368580135 ,
0.168520780166 ,
0.083858921274 ,
0.0965500567528 ,
0.0583748760177 ,
0.10861776207 ,
0.0630620807828 ,
0.0994895537243 ,
0.141927766283 ,
0.139207333622 ,
0.121823747806 ,
0.151899937472 ,
0.0958419326847 ,
0.0854113722539 ,
0.0643538866022 ,
0.129116520498 ,
0.126880085787 ,
0.0657007379543 ,
0.0672672533847 ,
0.0810235618452 ,
0.129298037204 ,
0.166073031159 ,
0.110147465951 ,
0.124428064004 ,
0.097968433868 ,
0.05461292359 ,
0.13669945961 ,
0.149132976836 ,
0.0403506836867 ,
0.0434080075484 ,
0.139654042391 ,
0.152344012626 ,
0.0859451625894 ,
0.0789909464941 ,
0.155345866161 ,
0.117870699398 ,
0.136434286988 ,
0.130630679939 ,
0.0971572253457 ,
0.146165506442 ,
0.116369612491 ,
0.111093923064 ,
0.11792970755 ,
0.0531657226648 ,
0.129096671454 ,
0.120412658714 ,
0.0933142039454 ,
0.14766435261 ,
0.0983279701752 ,
0.0655635613065 ,
0.129097716259 ,
0.127294930078 ,
0.093700694964 ,
0.132140900259 ,
0.121122356027 ,
0.129571524627 ,
0.11161071229 ,
0.106047751743 ,
0.0847786249245 ,
0.12401640636 ,
0.0742506912969 ,
0.11377055674 ,
0.0979446843385 ,
0.107869381102 ,
0.0899514059821 ,
0.135623836537 ,
0.110065773573 ,
0.106400449557 ,
0.153939692604 ,
0.0667352144138 ,
0.116092681867 ,
0.106919034305 ,
0.100567109952 ,
0.115651419774 ,
0.137587930323 ,
0.0629021170136 ,
0.14815236005 ,
0.142575337464 ,
0.0817824313229 ,
0.156298694848 ,
0.133285137246 ,
0.0350694264093 ,
0.122596186819 ,
0.178594437178 ,
0.104282105117 ,
0.159882683625 ,
0.0770994514138 ,
0.0747422440128 ,
0.120739744025 ,
0.0668952895008 ,
0.0641862996029 ,
0.0364826954736 ,
0.0766629729637 ,
0.03018511661 ,
0.120605259516 ,
0.114278424435 ,
0.123425664193 ,
0.144515414856 ,
0.11718739273 ,
0.0902139065123 ,
0.141510353143 ,
0.167640080181 ,
0.122445131071 ,
0.0985218121099 ,
0.108786359415 ,
0.15687646347 ,
0.117747540642 ,
0.105673349548 ,
0.156734888683 ,
0.147888064016 ,
0.122381148397 ,
0.114449903984 ,
0.136504089165 ,
0.147771106152 ,
0.128705853357 ,
0.101863040736 ,
0.0950054432959 ,
0.128969689561 ,
0.107225679187 ,
0.144589499161 ,
0.0864868774184 ,
0.101509274781 ,
0.0863222792841 ,
0.123405228057 ,
0.0887662619353 ,
0.0819416556959 ,
0.0865008445575 ,
0.131892576805 ,
0.142982900459 ,
0.0853843348795 ,
0.0935670073771 ,
0.130100105463 ,
0.141978302822 ,
0.0831956491346 ,
0.122299388099 ,
0.126026944685 ,
0.0998140742049 ,
0.107261750977 ,
0.132588916952 ,
0.115370028021 ,
0.0701287924276 ,
0.118013624106 ,
0.106442255304 ,
0.10458586553 ,
0.0792293087415 ,
0.131660798447 ,
0.144104532754 ,
0.177983627201 ,
0.125358468163 ,
0.0794059207265 ,
0.0676790608319 ,
0.136507794462 ,
0.125313982769 ,
0.16711889435 ,
0.156395007995 ,
0.130301002357 ,
0.18063925375 ,
0.0961346560532 ,
0.0240486499468 ,
0.0895287601838 ,
0.0829194331007 ,
0.0669577006579 ,
0.0669728838064 ,
0.136846063865 ,
0.105510661455 ,
0.11866093968 ,
0.127936151707 ,
0.150661306017 ,
0.0581695899831 ,
0.0835278636824 ,
0.0799899060883 ,
0.150613135041 ,
0.0545338752618 ,
0.0975720826772 ,
0.0943072359161 ,
0.127262376856 ,
0.03316823509 ,
0.100485941519 ,
0.112269309789 ,
0.0986250936892 ,
0.0467342497892 ,
0.14080159925 ,
0.096381394987 ,
0.0969916686588 ,
0.123330740528 ,
0.104279494321 ,
0.100182481046 ,
0.117443604026 ,
0.1012566303 ,
0.129585649012 ,
0.083177137874 ,
0.0848456795622 ,
0.131465444496 ,
0.150888229819 ,
0.149275537513 ,
0.138500245156 ,
0.104507691485 ,
0.126870187726 ,
0.0834672466506 ,
0.0654803863787 ,
0.108676144861 ,
0.0792953844106 ,
0.11139504607 ,
0.126498327834 ,
0.129198895775 ,
0.116162658243 ,
0.0838979025094 ,
0.15289968306 ,
0.144046105691 ,
0.162175132568 ,
0.141094827461 ,
0.129372495095 ,
0.161925504939 ,
0.100034779733 ,
0.0992381884709 ,
0.0907396907376 ,
0.0795107204811 ,
0.122949848241 ,
0.131671725858 ,
0.0846887098238 ,
0.0934051342016 ,
0.140596001538 ,
0.109661052427 ,
0.11435587483 ,
0.108179987785 ,
0.0729521628748 ,
0.121038815496 ,
0.144995257982 ,
0.139772182452 ,
0.117059390077 ,
0.129611199162 ,
0.153976030196 ,
0.129131068526 ,
0.0873438355014 ,
0.110278328305 ,
0.116866439798 ,
0.120746748393 ,
0.0753289214414 ,
0.146098490061 ,
0.0927997617194 ,
0.0587533037019 ,
0.115852953092 ,
0.0941376373532 ,
0.0843067122569 ,
0.0868909244458 ,
0.109218220144 ,
0.142631587199 ,
0.131836222695 ,
0.138275041884 ]
m_pool = meaningfulness
print(m_pool)
m_pool_sorted = np.sort(m_pool)
bin_edges = []

# Finding bin edges by looking at the word pool in groups of 1/10 and identifying the max bin values
for i in range(1,21):
    edge = m_pool_sorted[int(i*len(m_pool_sorted)/20)-1]
    bin_edges.append(edge)

print("Bins",bin_edges)
print("Len", len(bin_edges))
print(min(meaningfulness))
bin_zero = []
bin_one = []
bin_two = []
bin_three = []
bin_four = []
bin_five = []
bin_six = []
bin_seven = []
bin_eight = []
bin_nine = []
bin_ten = []
bin_eleven = []
bin_twelve = []
bin_thirteen = []
bin_fourteen = []
bin_fifteen = []
bin_sixteen = []
bin_seventeen = []
bin_eighteen = []
bin_nineteen = []


# Add the word frequency values to their corresponding bins depending on the max bin values
for i, freq in enumerate(m_pool):
    if freq >= 0 and freq <= bin_edges[0]:
        bin_zero.append([i, freq])
    elif (bin_edges[0] < freq) and (freq <= bin_edges[1]):
        bin_one.append([i, freq])
    elif (bin_edges[1] < freq) and (freq <= bin_edges[2]):
        bin_two.append([i, freq])
    elif (bin_edges[2] < freq) and (freq <= bin_edges[3]):
        bin_three.append([i, freq])
    elif (bin_edges[3] < freq) and (freq <= bin_edges[4]):
        bin_four.append([i, freq])
    elif (bin_edges[4] < freq) and (freq <= bin_edges[5]):
        bin_five.append([i, freq])
    elif (bin_edges[5] < freq) and (freq <= bin_edges[6]):
        bin_six.append([i, freq])
    elif (bin_edges[6] < freq) and (freq <= bin_edges[7]):
        bin_seven.append([i, freq])
    elif (bin_edges[7] < freq) and (freq <= bin_edges[8]):
        bin_eight.append([i, freq])
    elif (bin_edges[8] < freq) and (freq  <= bin_edges[9]):
        bin_nine.append([i, freq])
    elif (bin_edges[9] < freq) and (freq <= bin_edges[10]):
        bin_ten.append([i, freq])
    elif (bin_edges[10] < freq) and (freq <= bin_edges[11]):
        bin_eleven.append([i, freq])
    elif (bin_edges[11] < freq) and (freq <= bin_edges[12]):
        bin_twelve.append([i, freq])
    elif (bin_edges[12] < freq) and (freq <= bin_edges[13]):
        bin_thirteen.append([i, freq])
    elif (bin_edges[13] < freq) and (freq <= bin_edges[14]):
        bin_fourteen.append([i, freq])
    elif (bin_edges[14] < freq) and (freq <= bin_edges[15]):
        bin_fifteen.append([i, freq])
    elif (bin_edges[15] < freq) and (freq <= bin_edges[16]):
        bin_sixteen.append([i, freq])
    elif (bin_edges[16] < freq) and (freq <= bin_edges[17]):
        bin_seventeen.append([i, freq])
    elif (bin_edges[17] < freq) and (freq  <= bin_edges[18]):
        bin_eighteen.append([i, freq])
    else:
        bin_nineteen.append([i, freq])
# Print lengths of each bin
#
print(len(bin_zero))
print(len(bin_one))
print(len(bin_two))
print(len(bin_three))
print(len(bin_four))
print(len(bin_five))
print(len(bin_six))
print(len(bin_seven))
print(len(bin_eight))
print(len(bin_nine))
print(len(bin_ten))
print(len(bin_eleven))
print(len(bin_twelve))
print(len(bin_thirteen))
print(len(bin_fourteen))
print(len(bin_fifteen))
print(len(bin_sixteen))
print(len(bin_seventeen))
print(len(bin_eighteen))
print(len(bin_nineteen))

# Sum of the lengths of each bin should be equal to the total number of words in the word pool
print((len(bin_zero) + len(bin_one) + len(bin_two) + len(bin_three) + len(bin_four) + len(bin_five) + len(bin_six) + len(bin_seven) + len(bin_eight) + len(bin_nine) + len(bin_ten)+
       len(bin_eleven) + len(bin_twelve) + len(bin_thirteen) + len(bin_fourteen) + len(bin_fifteen) + len(bin_sixteen) + len(bin_seventeen) + len(bin_eighteen) + len(bin_nineteen )))

# Confirming that the max bin values match the initial max bin values
# print("Bin Max Values")
# print(array[58-1])
# print(array[(58+60-1)])
# print(array[(58+60+54-1)])
# print(array[(58+60+54+59-1)])
# print(array[(58+60+54+59+57-1)])
# print(array[(58+60+54+59+57+57-1)])
# print(array[(58+60+54+59+57+57+58-1)])
# print(array[(58+60+54+59+57+57+58+57-1)])
# print(array[(58+60+54+59+57+57+58+57+58-1)])
# print(array[(58+60+54+59+57+57+58+57+58+58-1)])

# Finding the mean word frequency of each word bin
mean_zero = (np.mean(np.asarray(bin_zero), axis=0)[1])
mean_one = (np.mean(np.asarray(bin_one), axis=0)[1])
mean_two = (np.mean(np.asarray(bin_two), axis=0) [1])
mean_three = (np.mean(np.asarray(bin_three), axis=0)[1])
mean_four = (np.mean(np.asarray(bin_four), axis=0) [1])
mean_five = (np.mean(np.asarray(bin_five), axis=0)[1])
mean_six = (np.mean(np.asarray(bin_six), axis=0)[1])
mean_seven = (np.mean(np.asarray(bin_seven), axis=0)[1])
mean_eight = (np.mean(np.asarray(bin_eight), axis=0)[1])
mean_nine = (np.mean(np.asarray(bin_nine), axis=0) [1])
mean_ten = (np.mean(np.asarray(bin_ten), axis=0) [1])
mean_eleven = (np.mean(np.asarray(bin_eleven), axis=0) [1])
mean_twelve = (np.mean(np.asarray(bin_twelve), axis=0) [1])
mean_thirteen = (np.mean(np.asarray(bin_thirteen), axis=0)[1])
mean_fourteen = (np.mean(np.asarray(bin_fourteen), axis=0) [1])
mean_fifteen = (np.mean(np.asarray(bin_fifteen), axis=0)[1])
mean_sixteen = (np.mean(np.asarray(bin_sixteen), axis=0)[1])
mean_seventeen = (np.mean(np.asarray(bin_seventeen), axis=0)[1])
mean_eightteen = (np.mean(np.asarray(bin_eighteen), axis=0)[1])
mean_nineteen = (np.mean(np.asarray(bin_nineteen), axis=0) [1])
# Creating a table: Frequency Information for Each Word Bin

M = [mean_zero, mean_one, mean_two, mean_three,mean_four, mean_five,mean_six, mean_seven, mean_eight, mean_nine, mean_ten,
     mean_eleven, mean_twelve, mean_thirteen, mean_fourteen, mean_fifteen, mean_sixteen, mean_seventeen, mean_eightteen, mean_nineteen]
print(M)

for i in M:
    print(i)
